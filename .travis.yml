---
dist: xenial
sudo: false

# We do not test pushes to branches, since they are redundant with the pull_request build
# for each branch. Take that, Big CI!
# branches:
#   only:
#     - master
#     - /^(edge|stable)-\d+\.\d+\.[\w-]+$/ # build version tags

stages:
  - name: test
  - name: integration-test
  - name: docker-master-push
    if: type != pull_request

jobs:
  include:

    - name: "Go unit tests"
      stage: test
      language: go
      # Quote the version number to avoid parsing issues like
      # https://github.com/travis-ci/gimme/issues/132.
      go: "1.11.5"
      go_import_path: github.com/linkerd/linkerd2
      cache:
        directories:
          - target
          - vendor
          - "$HOME/.cache"
      before_install:
        - echo $GITCOOKIE_SH | base64 -d | bash
      install:
        - ./bin/dep ensure -vendor-only -v
        - ./bin/dep status -v
      script:
        # TODO decide whether protoc should be committed or not. If so, we shouldn't do
        # this or we should error if it dirties the repo.
        - ./bin/protoc-go.sh
        - go test -cover -race -v ./...
        - ./bin/lint --verbose

    - name: "JS unit tests"
      stage: test
      language: node_js
      node_js:
        - "10"
      cache: yarn
      before_install:
        - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.7.0
        - export PATH="$HOME/.yarn/bin:$PATH"
        - export NODE_ENV=test
      install:
        - ./bin/web
      script:
        - ./bin/web test --reporters=jest-dot-reporter

    - name: "Go deps validation"
      stage: test
      language: generic
      script:
        - |
          (
            . bin/_tag.sh
            for f in $( grep -lR --include=Dockerfile\* go-deps: . ) ; do
              validate_go_deps_tag $f
            done
          )

    # Build container images, push to GCR, run integration tests
    - name: "Docker build, push, integration tests"
      stage: test
      language: go
      go: "1.11.5"
      go_import_path: github.com/linkerd/linkerd2
      services:
        - docker
      cache:
        directories:
          - vendor
          - "$HOME/google-cloud-sdk/"
          - "$HOME/.cache"
      before_install:
        - docker version
        - |
          # Install gcloud and kubectl.
          dir="${CLOUDSDK_INSTALL_DIR:-${HOME}}/google-cloud-sdk"
          (. bin/_gcp.sh ; install_gcloud_kubectl "$dir")
          . "$dir/path.bash.inc"
        - |
          # Configure gcloud with a service account.
          openssl aes-256-cbc -K $encrypted_ea955175587c_key -iv $encrypted_ea955175587c_iv -in .gcp.json.enc -out .gcp.json -d
          (. bin/_gcp.sh ; set_gcloud_config "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER")
        - |
          # Get a kubernetes context.
          (. bin/_gcp.sh ; get_k8s_ctx "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER")
        - gcloud version
        - kubectl version --short
        - echo $GITCOOKIE_SH | base64 -d | bash
      before_script:
        - gcloud docker --authorize-only
        - |
          export LINKERD_TAG=$(. bin/_tag.sh ; clean_head_root_tag)
          echo "LINKERD_TAG=${LINKERD_TAG}"
        - export BUILD_DEBUG=1 DOCKER_TRACE=1
      script:
        - bin/docker-build
        - bin/docker-push-deps
        - bin/docker-push $LINKERD_TAG
        - bin/dep ensure -vendor-only -v
        - bin/dep status -v
        - |
          # Install linkerd cli.
          version="$(CI_FORCE_CLEAN=1 bin/root-tag)"
          image="gcr.io/linkerd-io/cli-bin:$version"
          id=$(docker create $image)
          docker cp "$id:/out/linkerd-linux" "./linkerd"
        - gcloud version
        - kubectl version --short
        - ./linkerd version --client
        - |
          # Run integration tests.
          version="$(./linkerd version --client --short | tr -cd '[:alnum:]-')"
          ./bin/test-run `pwd`/linkerd linkerd-$version
        - |
          # Run linkerd-cni integration tests.
          TAG="$(./linkerd version --client --short)" go test -cover -race -v ./cni-plugin/test -integration-tests
      after_script:
        - |
          # Cleanup after integration test run.
          version="$(./linkerd version --client --short | tr -cd '[:alnum:]-')"
          # ./bin/test-cleanup linkerd-$version
        - bin/docker-retag-all $LINKERD_TAG master
        # - bin/docker-push master

notifications:
  email:
    on_success: never
